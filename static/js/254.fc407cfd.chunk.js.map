{"version":3,"file":"static/js/254.fc407cfd.chunk.js","mappings":"kRAMMA,GAAcC,EAAAA,EAAAA,IAAiB,IAcpC,GAD4BC,EAAAA,EAAAA,GAAU,CAACC,KAAK,wBAAhBD,EAZD,SAAC,GAAwB,EAAvBE,MAAuB,EAAjBC,KAAkB,IAAVC,GAAS,YACjD,OAAO,kBAAMC,SAAUD,EAAME,aAAtB,WACP,0BACA,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAASC,YAAY,WAAWC,SAAU,CAACC,EAAAA,GAASd,GAAce,KAAM,iBAAiBC,YAAY,0BAGvH,0BACA,qD,UCbJ,GAAgB,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,SAAW,0BAA0B,OAAS,yBCgBjL,EAVqB,SAACV,GACd,OACI,gBAAKW,UAAWC,EAAAA,OAAhB,UACA,UAAC,KAAD,CAASC,GAAI,YAAcb,EAAMc,GAAjC,UAAuCd,EAAMS,MAAK,0BAAK,gBAAKM,IAAI,wBCM5E,EAVmB,SAACf,GAEZ,OAEJ,iBAAKW,UAAWC,EAAAA,QAAhB,UAA4BZ,EAAMgB,SAAlC,QC0DJ,EArDgB,SAAChB,GAkBjB,IAOYiB,EAAiBjB,EAAMkB,QAAQC,KAAK,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYX,KAAMW,EAAEX,KAAmBK,GAAIM,EAAEN,GAAIO,IAAKD,EAAEC,KAAvBD,EAAEN,OAIhFQ,EAAkBtB,EAAMgB,SAASG,KAAK,SAAAI,GAAC,OAAG,SAAC,EAAD,CAASP,SAAUO,EAAEC,SAAcD,EAAET,OAGnF,OAEI,iBAAKH,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,YAAhB,SACKK,KAGhB,iBAAKN,UAAWC,EAAAA,SAAhB,UACYU,GACF,SAAC,EAAD,CAAqBrB,SAvBd,SAACwB,GACfC,QAAQC,IAAIF,EAAOG,gBACnB5B,EAAM6B,WAAWJ,EAAOG,0BCmC5B,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KArBkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBf,QAASc,EAAMC,YAAYf,QAC3BF,SAAUgB,EAAMC,YAAYjB,SAC5BkB,eAAgBF,EAAMC,YAAYC,mBAMhB,SAACC,GACvB,MAAO,CAEHN,WAAY,SAACD,GAAqBO,GAASC,EAAAA,EAAAA,GAAwBR,SAQvES,EAAAA,EAFJ,CAGMC","sources":["components/Dialogs/AddMessageForm/AddMessageForm.jsx","webpack://first/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import {Field, reduxForm} from \"redux-form\";\r\nimport { Element } from \"../../common/FormControls/FormControls\";\r\nimport { maxLengthCreator,required } from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\n\r\n\r\nconst maxLength20 = maxLengthCreator(20);\r\nexport const AddMessageForm=({input,meta,...props})=>{\r\n    return <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n    <Field component={Element} elementType='textarea' validate={[required,maxLength20]} name =\"newMessageBody\" placeholder=\"Enter your message\" />\r\n    </div>\r\n    \r\n    <div>\r\n    <button > Add Message</button>\r\n    \r\n    </div>\r\n    </form>\r\n}\r\n const AddMessageFormRedux = reduxForm({form:\"dialogAddMessageForm\"})(AddMessageForm);\r\n export default AddMessageFormRedux;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__OwjNr\",\"dialogItems\":\"Dialogs_dialogItems__vK432\",\"selected\":\"Dialogs_selected__QpKqD\",\"messages\":\"Dialogs_messages__gnhDz\",\"dialog\":\"Dialogs_dialog__iVPok\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\n\r\n    const DialogItem=(props)=>{\r\n        return(\r\n            <div className={s.dialog}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{ props.name}<div><img src=\"{props.img}\"></img></div></NavLink>\r\n         </div>\r\n        \r\n        );\r\n        \r\n        \r\n        }\r\nexport default DialogItem;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\n    const Message =(props)=>{\r\n  \r\n        return(\r\n    \r\n    <div className={s.message}>{props.messages} </div>\r\n    \r\n        )\r\n    };\r\n\r\n  \r\nexport default Message;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLength15, maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../common/FormControls/FormControls';\r\nimport AddMessageFormRedux, { AddMessageForm } from './AddMessageForm/AddMessageForm';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n//let store= props.store;\r\n//let state= props.store.getState().dialogsPage;\r\n\r\n// let addMessage=()=>{\r\n//     props.addMessage();\r\n//     //props.store.dispatch(addMessageActionCreator());\r\n        \r\n//     }\r\n// let onMessageChange=(e)=>{\r\n//     let text = e.target.value;\r\n//     props.updateNewMessageText(text)\r\n//    // store.dispatch(updateNewMessageTextActionCreator(text));}\r\n    \r\n    \r\n\r\n\r\nlet addNewMessage=(values)=>{\r\n    console.log(values.newMessageBody)\r\n    props.addMessage(values.newMessageBody);\r\n}\r\n\r\n <DialogItem />  \r\n \r\n        let dialogElements = props.dialogs.map (d => <DialogItem name={d.name} key = {d.id} id={d.id} img={d.img}/> );\r\n\r\n <Message />\r\n   \r\n    let messagesElemets = props.messages.map( m=> <Message messages={m.message} key={m.id}/> );\r\n   \r\n\r\n    return (\r\n        \r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogElements}\r\n </div>\r\n\r\n <div className={s.messages}>\r\n            {messagesElemets}\r\n           <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default Dialogs;\r\n\r\n\r\n// const maxLength20 = maxLengthCreator(20);\r\n// const AddMessageForm=(props)=>{\r\n//     return <form onSubmit={props.handleSubmit}>\r\n//     <div>\r\n//     <Field component={Textarea} validate={[required,maxLength20]} name =\"newMessageBody\" placeholder=\"Enter your message\" />\r\n//     </div>\r\n    \r\n//     <div>\r\n//     <button > Add Message</button>\r\n    \r\n//     </div>\r\n//     </form>\r\n// }\r\n// const AddMessageFormRedux = reduxForm({form:\"dialogAddMessageForm\"})(AddMessageForm);","\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { addMessageActionCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\n\r\n\r\n// const DialogsContainer = () => {\r\n\r\n\r\n\r\n//     return <StoreContext.Consumer> \r\n//         {\r\n\r\n//             (store) => {\r\n\r\n//                 let state = store.getState();\r\n\r\n//                 let addMessage = () => {\r\n//                     store.dispatch(addMessageActionCreator());\r\n\r\n//                 }\r\n//                 let onMessageChange = (text) => {\r\n\r\n//                     store.dispatch(updateNewMessageTextActionCreator(text));\r\n\r\n//                 }\r\n\r\n\r\n\r\n//                 return <Dialogs addMessage={addMessage} updateNewMessageText={onMessageChange} dialogs={state.dialogsPage.dialogs} messages={state.dialogsPage.messages} newMessageText={state.dialogsPage.newMessageText} />\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n\r\n// }\r\n\r\n// let mapStateToPropsForRedirect = (state) =>{\r\n//     return{\r\n//         isAuth:state.auth.isAuth\r\n//     }\r\n// }\r\n// AuthRedirectComponent= connect(mapStateToPropsForRedirect)(AuthRedirectComponent)\r\n\r\n// let AuthRedirectComponent = (props) =>{\r\n//     if(!props.isAuth) return <Navigate replace to =\"/login\"/>\r\n//     return <Dialogs {...props}/>\r\n// }\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newMessageText: state.dialogsPage.newMessageText,\r\n       \r\n        \r\n    }\r\n}\r\n\r\nlet mapDistpatchtoProps = (dispatch) => {\r\n    return {\r\n        \r\n        addMessage: (newMessageBody) => { dispatch(addMessageActionCreator(newMessageBody)); },\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDistpatchtoProps),\r\n    withAuthRedirect\r\n    )(Dialogs)"],"names":["maxLength20","maxLengthCreator","reduxForm","form","input","meta","props","onSubmit","handleSubmit","Field","component","Element","elementType","validate","required","name","placeholder","className","s","to","id","src","messages","dialogElements","dialogs","map","d","img","messagesElemets","m","message","values","console","log","newMessageBody","addMessage","compose","connect","state","dialogsPage","newMessageText","dispatch","addMessageActionCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}